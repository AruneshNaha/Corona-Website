{"version":3,"sources":["Layouts/Header.js","Layouts/Footer.js","Components/WorldWideGraph.js","Components/Worldwidecard.js","Components/CountryCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","color","light","expand","NavbarText","className","Footer","Container","fluid","tag","WorldWideGraph","active","recovered","deaths","data","title","value","label","labelStyle","dataEntry","parseInt","fontSize","fontFamily","Worldwidecard","useState","details","setDetails","fetchDetails","a","Axios","get","console","log","toast","type","useEffect","Row","Col","Card","body","inverse","CardBody","cases","CountryCard","country","xs","CardImg","src","countryInfo","flag","CardTitle","App","query","setQuery","setCountry","InputGroup","Input","onChange","e","target","placeholder","InputGroupAddon","addonType","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03fb69ad.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink, Navbar, NavbarText } from 'reactstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nexport default function Header() {\n    return (\n        <Navbar color = \"info\" light expand=\"md\">\n            <NavbarText className = \"text-white\">\n                Countries affected with corona\n            </NavbarText>\n        </Navbar>\n    )\n}\n","import React from 'react'\nimport { Container } from 'reactstrap'\n\nexport default function Footer() {\n    \n    return (\n        <Container fluid tag=\"footer\" className=\"text-center bg-info text-white text-uppercase fixed-bottom p-3\">\n            Let's fight together in the midst of this pandemic! We are all together <br/> Copyright &copy; 2020 Arunesh Naha\n        </Container>\n    )\n}\n","import React from \"react\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nexport default function WorldWideGraph({active, recovered, deaths}) {\n    const defaultLabelStyle = {\n        fontSize: '5px',\n        fontFamily: 'sans-serif',\n      };\n\n\n  return (\n    <PieChart\n      data={[\n        { title: \"Active\", value: active, label: \"Active\" , labelStyle: \"text-white\",color: \"#F3B431\" },\n        { title: \"Recovered\", value: recovered, label: \"Recovered\", color: \"#45CE30\" },\n        { title: \"Deaths\", value: deaths, label: \"Deaths\", color: \"#E44236\" },\n      ]}\n      label={({ dataEntry }) => `${dataEntry.title}:${parseInt((dataEntry.value/(active+recovered+deaths))*100)}%`}\n      labelStyle={{\n          ...defaultLabelStyle,\n        }}\n\n    />\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Card, CardBody, Container, Row, Col } from \"reactstrap\";\nimport Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport WorldWideGraph from \"./WorldWideGraph\";\n\nexport default function Worldwidecard() {\n  const [details, setDetails] = useState({});\n\n  const fetchDetails = async () => {\n    try {\n      const { data } = await Axios.get(\"https://disease.sh/v3/covid-19/all\");\n      console.log(data);\n      setDetails(data);\n    } catch (error) {\n      toast(\"Failed to fetch data! Please check your internet connection!\", {\n        type: \"error\",\n      });\n    }\n  };\n  useEffect(() => {\n    fetchDetails();\n  }, []);\n\n  return (\n    <Row>\n      <Col className=\"mb-5\">\n        \n        <Card className=\"p-0 text-center mb-3 mt-3 custom-card\" body inverse color=\"primary\">\n          <CardBody>\n            <div className=\"text-white\">Total Cases: {details.cases}</div>\n          </CardBody>\n        </Card>\n\n        <Card className=\"p-0 text-center custom-card mb-3 mt-3\" body inverse color=\"danger\">\n          <CardBody>\n            <div className=\"text-white\">Total Deaths: {details.deaths}</div>\n          </CardBody>\n        </Card>\n\n        <Card className=\"p-0 text-center custom-card mb-3 mt-3\" body inverse color=\"success\">\n          <CardBody>\n            <div className=\"text-white\">\n              Total Recoveries: {details.recovered}\n            </div>\n          </CardBody>\n        </Card>\n\n        <Card className=\"p-0 text-center custom-card mb-3 mt-3\" body inverse color=\"warning\">\n          <CardBody>\n            <div className=\"text-white\">Total Active: {details.active}</div>\n          </CardBody>\n        </Card>\n      </Col>\n      <Col>\n        <Container fluid=\"sm\" className=\"container\">\n          <h3 className=\"text-primary text-center\">Worldwide pie chart data</h3>\n          <WorldWideGraph\n            active={details.active}\n            recovered={details.recovered}\n            deaths={details.deaths}\n          />\n        </Container>\n      </Col>\n    </Row>\n  );\n}","import React, { useEffect, useState } from \"react\";\nimport {\n  Card,\n  CardBody,\n  Container,\n  Col,\n  Row,\n  CardImg,\n  CardTitle,\n} from \"reactstrap\";\nimport WorldWideGraph from \"./WorldWideGraph\";\n\nexport default function CountryCard({ country }) {\n  return (\n    <Container fluid className=\"container\">\n      <Card className=\"text-center mt-3 mb-4\">\n        <Row>\n          <Col xs=\"3\">\n            <CardImg\n              src={country.countryInfo?.flag}\n              className=\"img-thumbnail mt-3\"\n            />\n          </Col>\n\n          <Col xs=\"4\">\n            <h2 className=\"text-danger\">\n              <CardTitle>{country.country}</CardTitle>\n            </h2>\n            <CardBody>\n              <h4>\n                <div className=\"text-primary\">Total Cases: {country.cases}</div>\n                <div className=\"text-danger\">\n                  Total Deaths: {country.deaths}\n                </div>\n                <div className=\"text-success\">\n                  Total Recoveries: {country.recovered}\n                </div>\n                <div className=\"text-warning\">\n                  Total Active: {country.active}\n                </div>\n              </h4>\n            </CardBody>\n          </Col>\n          <Col>\n            <Container fluid=\"sm\" className=\"container mb-5 container-country\">\n              <h3 className=\"text-primary text-center\">\n                Country pie chart data\n              </h3>\n              <WorldWideGraph\n                active={country.active}\n                recovered={country.recovered}\n                deaths={country.deaths}\n              />\n            </Container>\n          </Col>\n          \n        </Row>\n      </Card>\n    </Container>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Layouts/Header\";\nimport Footer from \"./Layouts/Footer\";\nimport Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport Worldwidecard from \"./Components/Worldwidecard\";\nimport CountryCard from \"./Components/CountryCard\";\nimport {\n  Col,\n  Container,\n  Row,\n  InputGroup,\n  Input,\n  InputGroupAddon,\n  Button,\n} from \"reactstrap\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [country, setCountry] = useState(null);\n\n  const fetchDetails = async () => {\n    try {\n      const { data } = await Axios.get(\n        `https://disease.sh/v3/covid-19/countries/${query}`\n      );\n      console.log(data);\n      setCountry(data);\n    } catch (error) {\n      toast(\n        \"Failed to fetch data! Please check your internet connection or search a valid country name!\",\n        {\n          type: \"error\",\n        }\n      );\n    }\n  };\n\n  return (\n    <div>\n      <Header></Header>\n      <Container fluid>\n        <InputGroup className=\"mt-3\">\n          <Input\n            type=\"text\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            placeholder=\"Please provide a country name\"\n          ></Input>\n          <InputGroupAddon addonType=\"append\">\n            <Button color=\"primary\" onClick={fetchDetails}>\n              Fetch country details\n            </Button>\n          </InputGroupAddon>\n        </InputGroup>\n        <Worldwidecard></Worldwidecard>\n        {country ? <CountryCard country={country}></CountryCard> : null}\n        \n      </Container>\n      <Col>\n            <Container fluid>\n              <h1 className=\"text-white\">EMPTY SPACE</h1>\n            </Container>\n          </Col>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}